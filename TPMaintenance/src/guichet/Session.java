package guichet;import java.util.Timer;import java.util.TimerTask;import compte.Carte;import compte.Recu;import compte.Etat;import guichet.physique.ConsoleClient;import guichet.transaction.Transaction;/** Representation d'une session du guichet servant un client. */public class Session{    /** Constructor     *     *  @param atm guichet sur lequel la session est executee     */    public Session(Guichet atm)    {        this.atm = atm;                state = READING_CARD_STATE;    }    /** Realise le cas d'utilisation Session      */    public void performSession()    {        Carte card = null;        Transaction currentTransaction = null;                while (state != FINAL_STATE)        {            switch(state)            {                case READING_CARD_STATE:                                                    card = atm.getCardReader().readCard();                                        if (card != null)                        state = READING_PIN_STATE;                    else                    {                        atm.getCustomerConsole().display("Ne peut lire la carte");                        state = EJECTING_CARD_STATE;                    }                    break;                                    case READING_PIN_STATE:                                    try                    {                        pin = atm.getCustomerConsole().readPIN(                            "Veuillez entrer votre NIP\n" +                            "Puis appuyer sur ENTRER");                        state = CHOOSING_TRANSACTION_STATE;                    }                    catch(ConsoleClient.Cancelled e)                    {                        state = EJECTING_CARD_STATE;                    }                    break;                                case CHOOSING_TRANSACTION_STATE:                                    try                    {                    	TimerSessionExpire timer = new TimerSessionExpire(this);                    	timer.start();                    	                        currentTransaction =                             Transaction.makeTransaction(atm, this, card, pin);                                                if(!(timer.getIsDone()))                        {                        	timer.cancel();;                        	state = PERFORMING_TRANSACTION_STATE;                        }                        else{                        	atm.getCustomerConsole().display("Session expire");                        	state = EJECTING_CARD_STATE;                        }                        	                                            }                    catch(ConsoleClient.Cancelled e)                    {                        state = EJECTING_CARD_STATE;                    }                    break;                                    case PERFORMING_TRANSACTION_STATE:                                    try                    {                        boolean doAgain =                             currentTransaction.performTransaction();                        if (doAgain)                            state = CHOOSING_TRANSACTION_STATE;                        else                            state = EJECTING_CARD_STATE;                    }                    catch(Transaction.CardRetained e)                    {                        state = FINAL_STATE;                    }                    break;                                    case EJECTING_CARD_STATE:                                    atm.getCardReader().ejectCard();                    state = FINAL_STATE;                    break;            }        }    }        /** Changer le NIP entre par client (si l'extention NIP invalide est realise par une transaction)     *     *  @param pin Le nouveau NIP entre     */    public void setPIN(int pin)    {        this.pin = pin;    }        /** Accesseur à la classe TimerSessionExpire dans d'autre classe aillant une session    *    *  @param session Session ouverte     */    public TimerSessionExpire TimerSession(Session session)    {    	return new TimerSessionExpire(session);    }            public class TimerSessionExpire extends Timer    {    	private final float DEFAULT_TIMER = 0.1f;    	private Task task;    	private Session session;    	private long time;        /** Constructeur pour des fin de test         *         *  @param time Temps avant l'expiration de la session         *  @param session Session ouvert (a expirer, a echeance)          */    	public TimerSessionExpire(long time,Session session)    	{    		super();    		task = new Task();    		this.session = session;    		this.time = time;    	}    	 /** Constructeur d'une session normal        *        *  @param session Session ouvert (a expirer, a echeance)         */    	public TimerSessionExpire(Session session)    	{    		super();    		task = new Task();    		this.session = session;    		this.time = (int)(DEFAULT_TIMER * 60);		//Temps en minutes pour l'expiration de la session    	}    	    	public void start(){ this.schedule((TimerTask)task, time*1000);}    	    	public boolean getIsDone(){return task.getIsDone();}    	    	private class Task extends TimerTask    	{    		private boolean isDone = false;    		public boolean getIsDone()    		{    			return this.isDone;    		}    		public void run()    		{    			session.state = EJECTING_CARD_STATE;    			isDone = true;    		}    	}    }                // Variables d'instances    /** Le guichet sur lequel la session est executee     */    private Guichet atm;        /** Le NIP entre ou re-entre par le client     */    private int pin;    /** L'etat actuel de la session     */    private int state;        // Valeur possibles pour l'etat        /** Lecture de carte     */    private static final int READING_CARD_STATE = 1;        /** Demande de NIP     */    private static final int READING_PIN_STATE = 2;        /** Demande de choix de transaction     */    private static final int CHOOSING_TRANSACTION_STATE = 3;        /** Realisation de transaction     */    private static final int PERFORMING_TRANSACTION_STATE = 4;        /** Ejection de carte     */    private static final int EJECTING_CARD_STATE = 5;        /** Session terminee     */    private static final int FINAL_STATE = 6;    }